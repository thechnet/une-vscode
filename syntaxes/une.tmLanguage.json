{
	"$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
	"name": "Une",
	"patterns": [
		{ "include": "#all" }
	],
	"repository": {
		"all": {
			"patterns": [
				{ "include": "#keywords" },
				{ "include": "#strings" },
				{ "include": "#numbers" },
				{ "include": "#comments" },
				{ "include": "#constant_variables" },
				{ "include": "#functions" },
				{ "include": "#variables" }
			]
		},
		"keywords": {
			"patterns": [
				{
					"name": "keyword.control.une",
					"match": "\\b(if|elif|else|assert|while|for|from|till|in|return|exit|break|continue)\\b"
				},
				{
					"name": "storage.modifier",
					"match": "\\b(global)\\b"
				},
				{
					"name": "keyword.other.une",
					"match": "\\b(function|cover|any|all|True|False|Void|this)\\b"
				},
				{
					"name": "keyword.operator.comparison.une",
					"match": "(>=|<=|>|<|==|!=)"
				},
				{
					"name": "keyword.operator.assignment.une",
					"match": "(=|\\+=|-=|\\*\\*=|\\*=|\\/\\/=|\\/=|%=)"
				},
				{
					"name": "keyword.operator.arithmetic.une",
					"match": "(\\+|-|\\*\\*|\\*|\\/\\/|\\/|%)"
				},
				{
					"name": "keyword.operator.logical.une",
					"match": "(&&|\\|\\||\\?\\?|!)"
				},
				{
					"name": "keyword.operator.ternary.une",
					"match": "(\\?|:)"
				},
				{
					"name": "keyword.operator",
					"match": "(\\.\\.|\\.)"
				}
			]
		},
		"strings": {
			"begin": "\"",
			"beginCaptures": {
				"0": {
					"name": "string.quoted.double.une"
				}
			},
			"end": "\"",
			"endCaptures": {
				"0": {
					"name": "string.quoted.double.une"
				}
			},
			"patterns": [
				{
					"name": "string.quoted.double.une constant.character.escape.une",
					"match": "\\\\(n|r|t|e|a|\\\\|\n|\"|\\{|\\}|o[0-7]{2}|x[a-fA-F\\d]{2})"
				},
				{
					"begin": "\\{",
					"end": "\\}",
					"patterns": [
						{
							"include": "#all"
						}
					]
				},
				{
					"name": "string.quoted.double.une",
					"match": "(.)"
				}
			]
		},
		"numbers": {
			"patterns": [
				{
					"name": "constant.numeric.dec.une",
					"match": "\\b(?<!\\w)\\d+(?:\\.\\d+)?(?:[eE]-?\\d+)?\\b"
				},
				{
					"name": "constant.numeric.bin.une",
					"match": "\\b(?<!\\w)0b[01]+(?:\\.[01]+)?\\b"
				},
				{
					"name": "constant.numeric.oct.une",
					"match": "\\b(?<!\\w)0o[0-7]+(?:\\.[0-7]+)?\\b"
				},
				{
					"name": "constant.numeric.hex.une",
					"match": "\\b(?<!\\w)0x[a-fA-F\\d]+(?:\\.[a-fA-F\\d]+)?\\b"
				}
			]
		},
		"comments": {
			"name": "comment.line.number-sign.une",
			"begin": "(\\#)",
			"end": "($)"
		},
		"constant_variables": {
			"name": "variable.other.constant.une",
			"match": "\\b((?:_[0-9_]*)?[A-Z][A-Z0-9_]*)\\b"
		},
		"functions": {
			"match": "\\b([A-Za-z_]\\w*)\\s*\\(",
			"captures": {
				"1": {
					"name": "entity.name.function.une"
				}
			}
		},
		"variables": {
			"name": "variable.other.readwrite.une",
			"match": "\\b([A-Za-z_]\\w*)\\b"
		}
	},
	"scopeName": "source.une"
}
